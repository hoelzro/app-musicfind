=head1 Usage

musicfind [targets] [options]

=head1 Description

musicfind is a utility similar to the Unix command line utility find, only
specialized for music files.  The targets are a list of files/directories to
search, and the options can be categorized into filters and actions.

=head1 Command Line Options

=head2 Targets

The target files/directories are the arguments before the first - argument.
Each argument is also split by commas.  Also, all arguments following -- are
added to the target list, but these are NOT split by commas.  Examples:

 musicfind . foo -print # Searches the current directory and directory foo
 musicfind .,foo -print # Same thing
 musicfind . -print -- foo # Same thing
 musicfind . -print -- foo,bar -baz # Searches the current directory, directory
                                      foo,bar, and directory -baz

=head2 Filters

=head3 -channels [num]

Filters out files that do not have C<num> channels.

=head3 -tag [name]=[value](,[name]=[value])*

Filters out files that don't match the given name name-value pairs in their tags.
The value can be a regular string, a sh-style wildcard, or a Perl regular expression.
Regular expressions must start and end with /.

=head3 -artist

=head3 -album

=head3 -title

=head3 -tracknumber

These are shortcuts to -tag; -artist is equivalent to -tag artist=value, etc.

=head3 -and

Only selects files that the previous and next filters are both true for.

=head3 -or

Only selects files that the previous or the next filters are true for.

=head3 -not

Only selects files that the next filter is not true for.

All filters not chained together by -and or -or are tied together by implicit
-ands.

=head2 Actions

=head3 -rename [new_name]

Renames the file according to C<new_name>, which is a printf-style format string.
The extension is automatically appended.
If the destination filename already exists, the user is prompted for whether or not they wish to overwrite it.
You can override this with the -noconfirm option.  See below for details.

=head3 -set-tag [name]=[value](,[name]=[value])*

Sets the tags specified by the given names to the given values.

=head3 -delete-tag [name](,[name])*

Deletes the tags with the names specified.

=head3 -print (format)?

Prints the file name.  If format is specified, prints a printf-style string.  Details below.

=head3 -exec

Functions similar to find's -exec.  All arguments up to ; are included arguments to the given program.

=head3 -help

Print the help and exit.

=head3 -version

Print the version of the program and exit.

=head3 -plugins

Print the list of plugins which were loaded, and print their load status.
If they failed, print the reason why.  If it's something like
"Couldn't find module something-something in (long list of paths)",
you'll need to install that something-something module in order for that plugin to work.
After all plugins are listed, the program exits.

=head3 -noconfirm

See L</"-rename">.

=head3 -ignore-case

See L</"Case Sensitivity">.

=head2 Commas

Since -tag, -set-tag, and -delete-tag all accept comma-separated values, there's
a mechanism for inserting commas into the names/values of the your tags:  just
escape it with a backslash, like this:

 musicfind . -tag title="A title\, with a comma in the middle" -> "A title, with a comma in the middle"

Double backslashes become single backslashes:

 musicfind . -tag title="Backslash \\ fever" -> "Backslash \ fever"

-artist, -album, and all of the other shortcut options do NOT require you to
escape commas or backslashes.

=head2 Renaming Files

The -rename action only allows you to rename a file in its current directory;
if you wish to move a file to another directory, try -exec mv '{}' ... \;

=head2 About Rename and Exec

The -rename and -exec actions, due to their volatile nature, are automatically
sent to the end of the action list, and they may only occur once.  However, this
shouldn't really matter, since there's no point in renaming a file twice in one
execution.  Just keep in mind that {} will only interpolate to the original filename.

=head2 Rename/Print Format

The printf-style format string for rename and print is similar to printf;  The
only difference that instead of % fields specifying how to output a field, they
specify which tag to output.  %% still expands to %.

=head1 Examples

This one prints the filenames of all music files with the artist tagged as
System of a Down:

 musicfind . -tag artist="System of a Down"

This one renames files to an artist - title format:

 musicfind . -rename "%artist - %title"

This one purges your computer of evil:

 musicfind / -tag artist="Britney Spears" -exec rm '{}' \;

=head1 Plugin Oriented Architecture

Musicfind doesn't have any intrinsic support built in for any particular music
file format;  all of the work specific to a file type is done by the
MusicFind::* modules.  Currently I've written plugins for Ogg Vorbis and
Flac;  if you'd like to contribute, MusicFind.pm documents what methods a plugin
needs to implement and exactly what they're supposed to do.  Plugins should then
be placed into MusicFind/ under your @INC.  The -plugins option will let you
know what plugins are available to you.

=head1 Case Sensitivity

Tag names in searches and other situations are case-insensitive, but tag values
are case-sensitive in searches.  If you want a case-insensitive value
search, use the -ignore-case option:

 musicfind . -tag artist="System of a Down" -ignore-case

-ignore-case works with either wildcards or regexes, and appending /i to the end
of a regex will do the same thing as -ignore-case, but only for that regex!

=head1 Bugs and Ideas

If you have found any bugs or have any great ideas for musicfind, please send
them to me (patches are nice!) at rob@hoelz.ro.

Enjoy!

=head1 Author

Robert Hoelz <rob@hoelz.ro>

I wrote this when I was still pretty new to Perl; be merciful in your judgements
of the code!

=head1 Copying

Copyright (c) 2007-2010, Robert Hoelz. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. A copy of this license is included with this module (LICENSE.GPL).
