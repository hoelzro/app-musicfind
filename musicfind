#!/usr/bin/perl

use strict;
use warnings;

use File::Find;

use MusicFind qw(DEBUG);

BEGIN
{
    if(DEBUG) {
        require Data::Dumper;
        Data::Dumper->import();
    }
}

my @decoders;
my @failed; # Failed decoders
my @targets; # Dirs to search
my @actions; # What to do for each file

our $VERSION = "1.0";

sub glob_to_regex_string
{
    my $glob = shift;

    $glob =~ s/\*/\\E.*\\Q/g;
    $glob =~ s/\?/\\E.\\Q/g;
    $glob =~ s/(\[|\])/\\E$1\\Q/g;

    return "^\\Q$glob\\E\$";
}

sub escapeSplit
{
    my $string = shift;

    my @tokens;
    my @pieces;

    while($string =~ /(.*?)((?:\\\\)|(?:\\,)|,|$)/g) {
        if($2 eq ',') {
            push @pieces, $1;
            push @tokens, join('', @pieces);
            @pieces = ();
        } elsif($2 eq '\\\\') {
            push @pieces, "$1\\";
        } elsif($2 eq '\\,') {
            push @pieces, "$1,";
        } else {
            push @pieces, $1;
        }
    }
    push @tokens, join('', @pieces);
    return @tokens;
}

sub loadDecoders
{
    foreach my $inc (@INC) {
        if(-d "$inc/MusicFind") {
            my $decoderDir = "$inc/MusicFind";

            opendir my $handle, $decoderDir or die "Unable to open $decoderDir: $!\n";
            my @modules = readdir $handle;
            @modules = grep { /^[^.]/ && /\.pm$/ } @modules;
            closedir $handle;
            foreach my $module (@modules) {
                eval {
                    require "MusicFind/$module";
                };
                $module =~ s/\.pm$//;
                if($@) {
                    $@ =~ s/\n.*$//s;
                    push @failed, ["MusicFind::$module", $@];
                } else {
                    if(DEBUG) {
                        print "MusicFind::$module loaded\n";
                    }
                    push @decoders, "MusicFind::$module" unless($@);
                }
            }
            last;
        }
    }
    unless(@decoders) {
        die "Unable to load any decoding modules;  you should probably try to reinstall musicfind.\n";
    }
}

sub processCmdLine
{
    my $lastAction = '';
    my %filterActions = ('-channels' => 1, '-tag' => 1, ')' => 1, '(' => 1,
        '-artist' => 1, '-album' => 1, '-title' => 1, '-tracknumber' => 1);
    my @filters;
    my $i;
    my $parenLevel = 0;
    my $ignoreCase = '';
    my ($execSeen, $renameSeen);

    my %dispatch;

    # Shortcut for -artist, -album, -title, and -tracknumber
    my $getShortcuts = sub {
        my $tagName = $_[$i];
        $tagName = substr $tagName, 1, length($tagName) - 1;
        my $oldI = $i;
        $i = 0;
        unless(defined $_[$oldI + 1]) {
            die "-$tagName requires an argument\n";
        }
        $_[$oldI + 1] =~ s/\\/\\\\/g;
        $_[$oldI + 1] =~ s/,/\\,/g;
        $dispatch{'-tag'}->('-tag', "$tagName=$_[$oldI + 1]");
        $i = $oldI + 1;
    };

    my $setShortcuts = sub {
        my $tagName = $_[$i];
        $tagName = substr $tagName, 1, length($tagName) - 1;
        my $oldI = $i;
        $i = 0;
        unless(defined $_[$oldI + 1]) {
            die "-$tagName requires an argument\n";
        }
        $_[$oldI + 1] =~ s/\\/\\\\/g;
        $_[$oldI + 1] =~ s/,/\\,/g;
        $tagName =~ s/^set-//;
        $dispatch{'-set-tag'}->('-set-tag', "$tagName=$_[$oldI + 1]");
        $i = $oldI + 1;
    };

    # Dispatch table
    %dispatch = (
        '-and' => sub {
            if(exists $filterActions{$lastAction || ''} && exists $filterActions{$_[$i + 1] || ''}) {
                push @filters, ['and'];
            } else {
                die "Only filter actions can occur on either side of an -and switch\n";
            }
        },
        '-or' => sub {
            if(exists $filterActions{$lastAction || ''} && exists $filterActions{$_[$i + 1] || ''}) {
                push @filters, ['or'];
            } else {
                die "Only filter actions can occur on either side of an -or switch\n";
            }
        },
        '-not' => sub {
            if(exists $filterActions{$_[$i + 1] || ''}) {
                push @filters, ['not'];
            } else {
                die "Only filter actions can occur after a -not switch\n";
            }
        },
        '-rename' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            if($renameSeen) {
                die "Sorry, only one rename action is allowed\n";
            } else {
                unless(defined $_[$i + 1]) {
                    die "-rename requires an argument\n";
                }
                push @actions, ['rename', $_[++$i]];
                $renameSeen = 1;
            }
        },
        '-tag' => sub {
            unless(defined $_[$i + 1]) {
                die "-tag requires an argument\n";
            }
            my @tags = escapeSplit($_[++$i]);

            my $action = ['check_tag'];
            foreach my $tag (@tags) {
                if($tag =~ /(.+)=(.+)/) {
                    my ($name, $value) = ($1, $2);
                    $name =~ s/('|")/\\$1/g;
                    if($value =~ /^\/(.*)\/(i)?$/) {
                        my $ignore = $2 ? '(?i)' : '';
                        $value = "${ignore}$1";
                        $value =~ s/\//\\\//g;
                        $value =~ s/('|")/\\$1/g;
                        eval {
                            qr/$value/;
                        };
                        if($@) {
                            die "Invalid regular expression input: /$1/\n";
                        }
                    } else {
                        $value =~ s/\//\\\//g;
                        $value =~ s/('|")/\\$1/g;
                        $value = glob_to_regex_string($value);
                    }
                    push @$action, $name, $value;
                } else {
                    die "Tag matches must be in the format name=value; $tag is invalid\n";
                }
            }
            push @filters, $action;
        },
        '-set-tag' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            unless(defined $_[$i + 1]) {
                die "-set-tag requires an argument\n";
            }
            my @tags = escapeSplit($_[++$i]);

            my $action = ['set_tag'];
            foreach my $tag (@tags) {
                if($tag =~ /(.+)=(.+)/) {
                    my ($name, $value) = ($1, $2);
                    push @$action, $name, $value;
                } else {
                    die "Tag matches must be in the format name=value; $tag is invalid\n";
                }
            }
            push @actions, $action;
        },
        '-delete-tag' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            unless(defined $_[$i + 1]) {
                die "-delete-tag requires an argument\n";
            }
            my @tags = escapeSplit($_[++$i]);
            push @actions, ['delete_tag', @tags];
        },
        '-channels' => sub {
            unless(defined $_[$i + 1]) {
                die "-channels requires an argument\n";
            }
            my $num = $_[++$i];
            if($num =~ /^\d+$/) {
                push @filters, ['channels', $num];
            } else {
                die "You didn't specify an integer for the number of channels\n";
            }
        },
        '-print' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            if(! defined $_[$i + 1] || $_[$i + 1] =~ /^-/ || $_[$i + 1] =~ /^\(|\)$/) {
                push @actions, ['print'];
            } else {
                push @actions, ['print', $_[++$i]];
            }
        },
        '-print0' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            if(! defined $_[$i + 1] || $_[$i + 1] =~ /^-/ || $_[$i + 1] =~ /^\(|\)$/) {
                push @actions, ['print0'];
            } else {
                push @actions, ['print0', $_[++$i]];
            }
        },
        '-help' => sub {
            print while(<DATA>);
            exit(0);
        },
        '(' => sub {
            push @filters, ['('];
            $parenLevel++;
        },
        ')' => sub {
            push @filters, [')'];
            unless($parenLevel) {
                die "Unmatching parentheses\n";
            }
            $parenLevel--;
        },
        '-exec' => sub {
            if($parenLevel) {
                die "Only filters may occur within parentheses\n";
            }
            if($execSeen) {
                die "Sorry, only one exec action is allowed\n";
            } else {
                my @args;
                $i++;
                push @args, $_[$i++] until($i >= @_ || $_[$i] eq ';');
                die "-exec is missing a terminating semicolon\n" unless(defined $_[$i]);
                push @actions, ['exec', @args];
                $execSeen = 1;
            }
        },
        '-ignore-case' => sub {
            $ignoreCase = 'i';
        },
        '--' => sub {
            push @targets, @_[$i + 1 .. @_ - 1];
            $i = @_;
        },
        '-plugins' => sub {
            local $_;

            foreach (@decoders) {
                print "$_: OK\n";
            }
            foreach (@failed) {
                my ($module, $reason) = @$_;
                chomp $reason;
                print "$module: Failed ($reason)\n";
            }
            exit(0);
        },
        '-version' => sub {
            print "musicfind version $VERSION\n";
            exit(0);
        },
        '-noconfirm' => sub {
            $MusicFind::noconfirm = 1;
        },
        '-artist' => $getShortcuts,
        '-album' => $getShortcuts,
        '-title' => $getShortcuts,
        '-tracknumber' => $getShortcuts,
        '-set-artist' => $setShortcuts,
        '-set-album' => $setShortcuts,
        '-set-title' => $setShortcuts,
        '-set-tracknumber' => $setShortcuts
    );

    # Processes targets
    while(@_ && $_[0] !~ /^-/ && $_[0] !~ /^\(|\)$/) {
        push @targets, split(/,/, $_[0]);
        shift;
    }

    # Processes remainder of arguments
    for($i = 0; $i < @_; $i++) {
        my $arg = $_[$i];
        if(exists $dispatch{$arg}) {
            $dispatch{$arg}->(@_);
        } else {
            die "Invalid argument: $arg.  Try -help.\n";
        }
        $lastAction = $arg;
    }

    # Check that all parens are matched
    if($parenLevel) {
        die "Unmatching parentheses\n";
    }

    # Verify that there are targets
    unless(@targets) {
        die "No target directories were provided; try -help for options\n";
    }

    # If no actions are specified, default to print
    unless(@actions) {
        push @actions, ['print'];
    }

    # Make sure destructive actions come last
    my %actionPriorities = ('rename' => 1, 'exec' => 2);
    @actions = sort {
        my $pa = $actionPriorities{$a->[0]} || 0;
        my $pb = $actionPriorities{$b->[0]} || 0;

        $pa <=> $pb;
    } @actions;

    # Tie together non-joined filters with implicit ands
    for($i = 0; $i < @filters - 1; $i++) {
        next if($filters[$i]->[0] eq 'not');
        if($filters[$i + 1]->[0] ne 'and' &&
            $filters[$i + 1]->[0] ne 'or') {
            splice(@filters, $i + 1, 0, ['and']);
        }
        $i++;
    }

    # Create the filter subroutine dynamically
    foreach my $filter (@filters) {
        if(@$filter[0] eq 'and') {
            $filter = '&&';
        } elsif(@$filter[0] eq 'or') {
            $filter = '||';
        } elsif(@$filter[0] eq 'not') {
            $filter = '!';
        } elsif(@$filter[0] eq 'channels') {
            $filter = "\$file->channels == @$filter[1]";
        } elsif(@$filter[0] eq 'check_tag') {
            my @tags;
            for(my $i = 1; $i < @$filter; $i += 2) {
                my ($name, $value) = (@$filter[$i], @$filter[$i + 1]);
                push @tags, "\$file->tag(\'$name\') =~ /$value/o$ignoreCase";
            }
            $filter = join ' && ', @tags;
        } elsif(@$filter[0] eq '(') {
            $filter = '(';
        } elsif(@$filter[0] eq ')') {
            $filter = ')';
        }
    }
    my $filterConditions;
    if(@filters) {
        $filterConditions = join ' ', @filters;
    } else {
        $filterConditions = 1;
    }
    eval <<PERL;
    sub applyFilters {
        my \$file = shift;
        return $filterConditions;
    }
PERL
    if($@) {
        die "An eval error occured for condition string \"$filterConditions\": $!.\nPlease send this message along with the arguments you used to rob\@hoelz.ro so the developer can fix the issue\n";
    }

    # Debugging stuff
    if(DEBUG) {
        local $\ = "\n";
        local $, = ' ';
        print "Actions: ", Dumper(\@actions);
        print "Targets: ", Dumper(\@targets);
        print "Filter string: $filterConditions";
    }
}

sub loadMusicFile
{
    my ($filename, $filedir) = @_;
    my $object;

    return undef if(-d $filename);
    foreach my $dec (@decoders) {
        if($dec->accept($filename)) {
            $object = $dec->new($filename, $filedir);
            last if($object);
        }
    }
    return $object;
}

sub findRoutine
{
    my $file = loadMusicFile($File::Find::name, $File::Find::dir);
    if($file && applyFilters($file)) {
        foreach my $action (@actions) {
            my ($method, @args) = @$action;
            $file->$method(@args);
        }
    }
}

BEGIN
{
    loadDecoders;
}
processCmdLine(@ARGV);
find({ wanted => \&findRoutine, no_chdir => 1}, @targets);

=head1 NAME

    musicfind - A command line utility like Unix find, only specific to music
                files.

=head1 DESCRIPTION

    musicfind -help should provide you with all the information you need;
    otherwise, check out MusicFind.pm's documentation.

=head1 AUTHOR

Robert Hoelz <rob@hoelz.ro>

=head1 COPYING

Copyright (c) 2007-2010, Robert Hoelz. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. A copy of this license is included with this module (LICENSE.GPL).

=cut

__END__
musicfind [targets] [options]
musicfind is a utility similar to the Unix command line utility find, only
specialized for music files.  The targets are a list of files/directories to
search, and the options can be categorized into filters and actions:

Targets

The target files/directories are the arguments before the first - argument.
Each argument is also split by commas.  Also, all arguments following -- are
added to the target list, but these are NOT split by commas.  Examples:

musicfind . foo -print # Searches the current directory and directory foo
musicfind .,foo -print # Same thing
musicfind . -print -- foo # Same thing
musicfind . -print -- foo,bar -baz # Searches the current directory, directory
                                     foo,bar, and directory -baz

Filters

    -channels num Filters out files that do not have num channels.
    -tag name=value(,name=value)* Filters out files that don't match the given
                                  tag name-value pairs.  The value can be a
                                  regular string, a sh-style wildcard, or a
                                  Perl regular expression.  Regexes must start
                                  and end with /.
    -artist
    -album
    -title
    -tracknumber These are shortcuts to -tag;  -artist is equivalent to -tag
                 artist=value, etc.

Although not techincally filters, these next three options allow the user to
better manipulate filters:

    -and Only selects files that the previous and next filters are both true
         for.
    -or  Only selects files that the previous or the next filters are true for.
    -not Only selects files that the next filter is not true for.

All filters not chained together by -and or -or are tied together by implicit
-ands.

Actions

    -rename new_name Renames the file according to new_name, which is a
                     printf-style format string.  The extension is automatically
                     appended.  If the destination filename already exists, the
                     user is prompted for whether or not they wish to overwrite
                     it.  You can override this with the -noconfirm option.  See
                     below for details.
    -set-tag name=value(,name=value)* Sets the tags specified by the given names
                                      to the given values.
    -delete-tag name(,name)* Deletes the tags with the names specified.
    -print (format)? Prints the file name.  If format is specified, prints a
                     printf-style string.  Details below.
    -exec Functions similar to find's -exec.  All arguments up to ; are included
          arguments to the given program.
    -help Print this message and exit.
    -version Print the version of the program and exit.
    -plugins Print the list of plugins which were loaded, and print their load
             status.  If they failed, print the reason why.  If it's something
             like "Couldn't find module something-something in (long list of
             paths)", you'll need to install that something-something module in
             order for that plugin to work.  After all plugins are listed, the
             program exits.

Other Options

    -noconfirm See -rename.
    -ignore-case See Case Sensitivity.

Commas

Since -tag, -set-tag, and -delete-tag all accept comma-separated values, there's
a mechanism for inserting commas into the names/values of the your tags:  just
escape it with a backslash, like this:

musicfind . -tag title="A title\, with a comma in the middle" -> "A title, with
    a comma in the middle"

Double backslashes become single backslashes:

musicfind . -tag title="Backslash \\ fever" -> "Backslash \ fever"

-artist, -album, and all of the other shortcut options do NOT require you to
escape commas or backslashes.

Renaming Files

The -rename action only allows you to rename a file in its current directory;
if you wish to move a file to another directory, try -exec mv '{}' ... \;

About Rename and Exec

The -rename and -exec actions, due to their volatile nature, are automatically
sent to the end of the action list, and they may only occur once.  However, this
shouldn't really matter, since there's no point in renaming a file twice in one
execution.  Just keep in mind that {} will only interpolate to the original filename.

Rename/Print Format

The printf-style format string for rename and print is similar to printf;  The
only difference that instead of % fields specifying how to output a field, they
specify which tag to output.  %% still expands to %.

Examples

This one prints the filenames of all music files with the artist tagged as
System of a Down:

musicfind . -tag artist="System of a Down"

This one renames files to an artist - title format:

musicfind . -rename "%artist - %title"

This one purges your computer of evil:

musicfind / -tag artist="Britney Spears" -exec rm '{}' \;

Plugin Oriented Architecture

Musicfind doesn't have any intrinsic support built in for any particular music
file format;  all of the work specific to a file type is done by the
MusicFind::* modules.  Currently I've written plugins for Ogg Vorbis and
Flac;  if you'd like to contribute, MusicFind.pm documents what methods a plugin
needs to implement and exactly what they're supposed to do.  Plugins should then
be placed into MusicFind/ under your @INC.  The -plugins option will let you
know what plugins are available to you.

Case Sensitivity

Tag names in searches and other situations are case-insensitive, but tag values
are case-sensitive in searches.  If you want a case-insensitive value
search, use the -ignore-case option:

musicfind . -tag artist="System of a Down" -ignore-case

-ignore-case works with either wildcards or regexes, and appending /i to the end
of a regex will do the same thing as -ignore-case, but only for that regex!

Bugs and Ideas

If you have found any bugs or have any great ideas for musicfind, please send
them to me (patches are nice!) at rob@hoelz.ro.  I'll be making my darcs
repository for the project public soon, so I'll post that in here when I can.

Enjoy!
