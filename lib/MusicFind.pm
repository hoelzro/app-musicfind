#!/usr/bin/perl

package MusicFind;

use strict;
use warnings;

our $VERSION = 1.0;

sub substitute
{
    my ($this, $string) = @_;

    $string =~ s/%(%|(\S*))/$1 eq '%' ? '%' : $this->tag($1)/ge;
    return $string;
}

sub rename
{
    my ($this, $newName) = @_;
    my $name = $this->filename;
    $newName = $this->substitute($newName);
    rename $name, $newName or warn "Unable to rename $name to $newName: $!\n";
    # Reopen?
}

sub print
{
    my ($this, $format) = @_;

    local $\ = "\n";
    if($format) {
        print $this->substitute($format);
    } else {
        print $this->filename;
    }
}

sub accept
{
    return 0;
}
__END__

=head1 NAME

MusicFind - Base class for MusicFind plugins

=head1 DESCRIPTION

MusicFind implements two methods that should not change in subclasses (but
there's nothing stopping you from overloading them), plus a utility method used
by those two methods.

=head2 Implemented Routines

=over

=item $object->substitute($format)

Substitutes music file tags in for % marked fields, or % in for %%.  Examples:

C<$this-E<gt>substitute("%artist - %title") # Results in "System of a Down - Soil">

=item $object->rename($format)

Substitutes % fields in $format, and then renames the file represented by this
MusicFind object to the name generated by $format.

=item $object->print([$format])

If $format is not specified, this method just prints out the object's filename
to standard output.  Otherwise, it expands $format using substitute and prints
the resulting string.  Newlines are added to the output.

=back

=head2 Abstract methods

=over

=item $class->accept($filename)

This class method should return true only if the plugin represented by $class can
handle the file specified by $filename.

=item $class->new($filename)

This class method should construct a new object.

=item $object->channels()

This method should return the number of audio channels in the file represented
by this MusicFind object.

=item $object->set_tag(@name_value_pairs)

This method should add/overwrite tags in the file;  items in @_ with an even
index are tag names; odd indices are the new tag values.

=item $object->delete_tag(@names)

This method should remove all of the tags in @names from the file.

=item $object->tag($name)

This method should return the value of the tag specified by $name.

=item $object->filename()

This method should return the filename of the file represented by this MusicFind
object.

=back

=head1 AUTHOR

Robert Hoelz <hoelz@wisc.edu>

=head1 COPYING

=cut
