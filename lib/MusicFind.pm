#!/usr/bin/perl

package MusicFind;

use strict;
use warnings;

use constant DEBUG => 1;

BEGIN
{
    if(DEBUG) {
        require Data::Dumper;
        Data::Dumper->import();
    }
}

require Exporter;

our $VERSION = 1.0;
our @ISA = qw(Exporter);
our @EXPORT = qw(DEBUG);
our @EXPORT_OK = @EXPORT;
our %EXPORT_TAGS = (':DEFAULT' => \@EXPORT);

sub substitute
{
    my ($this, $string) = @_;

    $string =~ s/%(%|(\S*))/$1 eq '%' ? '%' : $this->tag($1)/ge;
    return $string;
}

sub rename
{
    my ($this, $newName) = @_;
    my $name = $this->{'filename'};
    $newName = $this->substitute($newName);
    if(DEBUG) {
        print "Renaming $name to $newName\n";
    } else {
        rename $name, $newName or warn "Unable to rename $name to $newName: $!\n";
    }
    $this->{filename} = $newName;
    $this->dirty = 1;
}

sub _print
{
    my ($this, $format) = @_;

    if($format) {
        print $this->substitute($format);
    } else {
        print $this->filename;
    }
}

sub print
{
    my ($this, $format) = @_;
    local $\ = "\n";
    $this->_print($format);
}

sub print0
{
    my ($this, $format) = @_;
    local $\ = "\0";
    $this->_print($format);
}

sub exec
{
    my ($this, $programName, @args) = @_;

    $this->reload if($this->dirty);

    local $_;
    @args = map {
        if($_ eq '{}') {
            $_ = $this->filename;
        } else {
            $_ = $this->substitute($_);
        }
        $_ = "\"$_\"";
    } @args;

    local $" = ' ';
    if(DEBUG) {
        print "Running $programName @args\n";
    } else {
        system("$programName @args");
    }
}

sub new 
{
    my ($class, $filename) = @_;
    return bless {dirty => undef, filename => $filename}, $class;
}

sub dirty : lvalue
{
    my $this = shift;
    $this->{dirty};
}

sub accept
{
    return 0;
}
1;
__END__

=head1 NAME

MusicFind - Base class for MusicFind plugins

=head1 DESCRIPTION

MusicFind implements two methods that should not change in subclasses (but
there's nothing stopping you from overloading them), plus a utility method used
by those two methods.

=head2 Implemented Routines

=over

=item $object->substitute($format)

Substitutes music file tags in for % marked fields, or % in for %%.  Examples:

C<$this-E<gt>substitute("%artist - %title") # Results in "System of a Down - Soil">

=item $object->rename($format)

Substitutes % fields in $format, and then renames the file represented by this
MusicFind object to the name generated by $format, keeping the file in its
original directory.

=item $object->print([$format])

If $format is not specified, this method just prints out the object's filename
to standard output.  Otherwise, it expands $format using substitute and prints
the resulting string.  Newlines are added to the output.

=item $object->print0([$format])

Just just C<print>, only this version prints a NULL character instead of a
newline.

=item $object->exec(@args)

Essentially performs system(@args), only each argument after the first is
run through substitute, and '{}' is replaced by the filename.  Similar to find's
exec.  If the execution fails, the program will warn the user.

=item $object->dirty

A read-write property indicating that the location of the current file has
changed.  Set to true after a rename action.  You shouldn't have to touch this.

=back

=head2 Abstract methods

=over

=item $class->accept($filename)

This class method should return true only if the plugin represented by $class can
handle the file specified by $filename.

=item $class->new($fullpath, $filename)

This class method should construct a new object, using the super class
constructor.  C<$filename> should be passed to the super class constructor.
This class method should return undef on failure.

=item $object->channels()

This method should return the number of audio channels in the file represented
by this MusicFind object.

=item $object->set_tag(@name_value_pairs)

This method should add/overwrite tags in the file;  items in @_ with an even
index are tag names; odd indices are the new tag values.

=item $object->delete_tag(@names)

This method should remove all of the tags in @names from the file.

=item $object->tag($name)

This method should return the value of the tag specified by $name.

=item $object->filename()

This method should return the filename of the file represented by this MusicFind
object.  Note:  This returns the fullpath to the file.

=item $object->reload()

This method should reload the wrapped object with the file given by
$object->{fullpath}.  This gets called by exec if the current object is dirty.
It's kind of like calling new, but the original object is used instead of a new
blessed reference.  In fact, it might be a good idea to implement new as
follows:

sub new
{
    my ($class, $fullpath, $filename) = @_;
    my $this= MusicFind::new($class, $filename);
    $this->{'fullpath'} = $fullpath;
    $this->reload();
    return $this;
}

See C<dirty>.
=back

Feel free to look at the standard plugins I've written to see how a plugin
should be written.

=head1 AUTHOR

Robert Hoelz <hoelz@wisc.edu>

=head1 COPYING

Copyright (c) 2007, Robert Hoelz. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. A copy of this license is included with this module (LICENSE.GPL).

=cut
